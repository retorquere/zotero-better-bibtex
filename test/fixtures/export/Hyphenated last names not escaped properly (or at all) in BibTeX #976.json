{
  "config": {
    "id": "36a3b0b5-bad0-4a04-b79b-441c7cef77db",
    "label": "BetterBibTeX JSON",
    "localeDateOrder": "ymd",
    "options": {
      "exportNotes": true
    },
    "preferences": {
      "bibtexURL": "url",
      "citekeyFormat": "authorsAlpha(creator=\"*\",initials=false,sep=\" \").fold + shorttitle(2,2) + shortyear",
      "itemObserverDelay": 100,
      "skipFields": "publisher,place,pages,file,keywords,eprinttype,archiveprefix,eprint,month,language,archiveprefix,abstract"
    }
  },
  "items": [
    {
      "abstractNote": "Random number generators (RNGs) play a crucial role in many cryptographic schemes and protocols, but their security proof usually assumes that their internal state is initialized with truly random seeds and remains secret at all times. However, in many practical situations these are unrealistic assumptions: The seed is often gathered after a reset/reboot from low entropy external events such as the timing of manual key presses, and the state can be compromised at unknown points in time via side channels or penetration attacks. The usual remedy (used by all the major operating systems, including Windows, Linux, FreeBSD, MacOS, iOS, etc.) is to periodically replenish the internal state through an auxiliary input with additional randomness harvested from the environment. However, recovering from such attacks in a provably correct and computationally optimal way had remained an unsolved challenge so far.\n\n\n\nIn this paper we formalize the problem of designing an efficient recovery mechanism from state compromise, by considering it as an online optimization problem. If we knew the timing of the last compromise and the amount of entropy gathered since then, we could stop producing any outputs until the state becomes truly random again. However, our challenge is to recover within a time proportional to this optimal solution even in the hardest (and most realistic) case in which (a) we know nothing about the timing of the last state compromise, and the amount of new entropy injected since then into the state, and (b) any premature production of outputs leads to the total loss of all the added entropy {\\em used by the RNG}, since the attacker can use brute force to enumerate all the possible low-entropy states. In other words, the challenge is to develop recovery mechanisms which are guaranteed to save the day as quickly as possible after a compromise we are not even aware of. The dilemma that we face is that any entropy used prematurely will be lost, and any entropy which is kept unused will delay the recovery.\n\nAfter developing our formal definitional framework for RNGs with inputs, we show how to construct a nearly optimal RNG which is secure in our model. Our technique is inspired by the design of the Fortuna RNG (which is a heuristic RNG construction that is currently used by Windows and comes without any formal analysis), but we non-trivially adapt it to our much stronger adversarial setting. Along the way, our formal treatment of Fortuna enables us to improve its entropy efficiency by almost a factor of two, and to show that our improved construction is essentially tight, by proving a rigorous lower bound on the possible efficiency of any recovery mechanism in our very general model of the problem.",
      "accessDate": "2018-05-30 21:07:21",
      "creators": [
        {
          "creatorType": "author",
          "firstName": "Yevgeniy",
          "lastName": "Dodis"
        },
        {
          "creatorType": "author",
          "firstName": "Adi",
          "lastName": "Shamir"
        },
        {
          "creatorType": "author",
          "firstName": "Noah",
          "lastName": "Stephens-Davidowitz"
        },
        {
          "creatorType": "author",
          "firstName": "Daniel",
          "lastName": "Wichs"
        }
      ],
      "date": "2014",
      "itemID": 1,
      "itemType": "conferencePaper",
      "libraryCatalog": "ePrint IACR",
      "publicationTitle": "CRYPTO",
      "tags": [
        {
          "tag": "entropy accumulation",
          "type": 1
        },
        {
          "tag": "PRG",
          "type": 1
        },
        {
          "tag": "RNG with input",
          "type": 1
        }
      ],
      "title": "How to eat your entropy and have it too -- optimal recovery strategies for compromised RNGs",
      "url": "https://eprint.iacr.org/2014/167"
    }
  ]
}