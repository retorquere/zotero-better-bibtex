/* eslint-disable @stylistic/member-delimiter-style, @stylistic/quotes, max-len, @stylistic/quote-props, comma-dangle, eol-last */
<%
function stringify(o, indent=true) {
  return JSON.stringify(o, null, indent ? 2 : undefined)
}
%>

export type Preferences = {
<% for (const pref of it.preferences) { %>
  <%=pref.name %>: <%~ pref.valid %>

<% } %>
}
export type PreferenceName = keyof Preferences

export const defaults: Preferences = {
<% for (const pref of it.preferences) { %>
  <%= pref.name %>: <%~ stringify(pref.name === 'citekeyFormat' ? pref.default.replace('\u200b', '') : pref.default, false) %>,
<% } %>
}

export const affects: Partial<Record<PreferenceName, string[]>> = <%~ stringify(
  it
  .preferences
  .reduce((acc, p) => { if (p.affects && p.affects.length) acc[p.name] = p.affects; return acc}, {})
) %>

export const affectedBy: Record<string, PreferenceName[]> = <%~ stringify(
  it
  .preferences
  .reduce((acc, p) => {
    for (const tr of (p.affects || [])) {
      acc[tr] = acc[tr] || []
      acc[tr].push(p.name)
    }
    return acc
  }, { 'BetterBibTeX JSON': []})
) %>


export const options: Partial<Record<PreferenceName, Record<string, string>>> = <%~ stringify(
  it
  .preferences
  .reduce((acc, pref) => {
    if (pref.options) acc[pref.name] = [...pref.options.entries()].reduce((acc, [k, v]) => Object.assign(acc, {[k]: v}), {})
    return acc
  }, {})
) %>

<%
const overrides = it.preferences.filter(pref => pref.override)

let autoExport = {}
for (const header of it.translators) {
  if (typeof header.displayOptions?.keepUpdated !== 'boolean') continue

  autoExport[header.translatorID] = {
    options: Object.keys(header.displayOptions).filter(o => it.displayOptions.includes(o)),
    preferences: overrides.filter(p => p.affects.includes(header.label)).map(p => p.name),
  }
}

autoExport = stringify(autoExport)
for (const header of it.translators) {
  autoExport = autoExport
    .split('\n')
    .map(line => line.includes(header.translatorID) ? `${line} // ${header.label}` : line)
    .join('\n')
}
%>

export const autoExport: Record<string, { options: string[], preferences: PreferenceName[] }> = <%~ autoExport %>
